index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>AJAX Registration</title>
  <style>
    .message {
      margin-top: 15px;
      font-weight: bold;
    }
    .success {
      color: green;
    }
    .error {
      color: red;
    }
  </style>
</head>
<body>
  <h1>Register for Event (AJAX)</h1>

  <form id="registrationForm">
    <label>
      Name:
      <input type="text" name="name" required />
    </label><br/><br/>

    <label>
      Email:
      <input type="email" name="email" required />
    </label><br/><br/>

    <button type="submit">Submit</button>
  </form>

  <div id="message" class="message"></div>

  <script src="main.js"></script>
</body>
</html>


main.js:
const form = document.getElementById("registrationForm");
const messageDiv = document.getElementById("message");

// Mock API endpoint (use your own or this placeholder)
const mockApiUrl = "https://jsonplaceholder.typicode.com/posts";

form.addEventListener("submit", function(event) {
  event.preventDefault();

  messageDiv.textContent = "Submitting...";
  messageDiv.className = "message";

  const formData = {
    name: form.elements["name"].value.trim(),
    email: form.elements["email"].value.trim()
  };

  // Simulate network delay using setTimeout inside a Promise
  function delayedFetch(url, options) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        fetch(url, options)
          .then(response => {
            if (!response.ok) throw new Error("Network error");
            return response.json();
          })
          .then(data => resolve(data))
          .catch(err => reject(err));
      }, 2000); // 2-second delay
    });
  }

  delayedFetch(mockApiUrl, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(formData)
  })
    .then(data => {
      messageDiv.textContent = `Success! Registered user ID: ${data.id}`;
      messageDiv.className = "message success";
      form.reset();
    })
    .catch(error => {
      messageDiv.textContent = "Registration failed: " + error.message;
      messageDiv.className = "message error";
    });
});



